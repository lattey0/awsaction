# .github/workflows/deploy-prod.yml
name: Deploy to Production

on:
  push:
    # This is the key change: trigger on SemVer tags
    tags:
      - 'v*.*.*'

permissions:
  id-token: write # Required for OIDC
  contents: read  # Required to checkout the code

jobs:
  deploy:
    name: Terraform Plan and Apply
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # This step is useful for getting the version number from the tag
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Configure AWS credentials deploy and prod
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      # You could even use the version number in your Terraform variables if needed!
      # For example: run: terraform plan -var="app_version=${{ env.VERSION }}"
      
      # repo1ec2 deploy
      - name: Terraform Init repo1ec2
        run: terraform init
        working-directory: repo1ec2

      - name: Terraform Plan repo1ec2
        run: terraform plan -out=tfplan.out
        working-directory: repo1ec2

      - name: Terraform Apply repo1ec2
        run: terraform apply -auto-approve tfplan.out
        working-directory: repo1ec2

      # repo2s3 deploy
      - name: Terraform Init repo2s3
        run: terraform init
        working-directory: repo2s3

      - name: Terraform Plan repo2s3
        run: terraform plan -out=tfplan.out
        working-directory: repo2s3

      - name: Terraform Apply repo2s3
        run: terraform apply -auto-approve tfplan.out
        working-directory: repo2s3